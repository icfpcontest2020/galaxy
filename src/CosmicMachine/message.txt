//Numbers!
0 
1 |
2 ||
3 |||
4 ||||
5 |||||
6 ||||||
7 |||||||
8 ||||||||
...

//Left vertical bar and top horizontal bar defines glyph size. 
//Glyph is square. 
//All other pixels except these bars are bits of encoded number written left to right top to bottom.   
0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 ... 506 507 508 509 510 511 512 513 514 ... 65535 65536 65537 ...

// Negative numbers. Additional pixel in vertical bar is the sign of negative number
4 3 2 1 0 -1 -2 -3 -4 -5 -6 -7 -8 -9 -10 -11 -12 -13 -14 -15 -16 -17 ... -510 -511 -512 -513 -514 ... -65535 -65536 -65537 ...

// Equality sign   
=
0 = 0
1 = 1
2 = 2
3 = 3
...
10 = 10
11 = 11
...
-1 = -1
-2 = -2
...

// Next integer. Symbol ` in the beginning — is the sign of function call (See below).
succ
` succ 0 = 1
` succ 1 = 2
` succ 2 = 3
` succ 3 = 4
...
` succ 300 = 301
` succ 301 = 302
...
` succ -1 = 0
` succ -2 = -1
` succ -3 = -2
...

// Previous integer.    
pred
` pred 1 = 0
` pred 2 = 1
` pred 3 = 2
` pred 4 = 3
...
` pred 1024 = 1023
...
` pred 0 = -1
` pred -1 = -2
` pred -2 = -3
...

// Sum of two args. Function call sign written twice because of PLUS has two arguments.    
+
` ` + 1 2 = 3
` ` + 2 1 = 3
` ` + 0 1 = 1
` ` + 2 3 = 5
` ` + 3 5 = 8
...

// Symbols for arbitrary variables
x y z u v ...
` ` + 0 x = x
` ` + 0 y = y
` ` + 0 z = z
...
` ` + x 0 = x
` ` + y 0 = y
` ` + z 0 = z
...
` ` + x y = ` ` + y x
...

// Multiplication    
*
` ` * 4 2 = 8
` ` * 3 4 = 12
` ` * 3 -2 = -6
` ` * x y = ` ` * y x
` ` * x 0 = 0
` ` * x 1 = x
...

// Integer division     
/
` ` / 4 2 = 2
` ` / 4 3 = 1
` ` / 4 4 = 1
` ` / 4 5 = 0
` ` / 5 2 = 2
` ` / 6 -2 = -3
` ` / 5 -3 = -1
` ` / -5 3 = -1
` ` / -5 -3 = 1
` ` / x 1 = x
...

//Equality of two numbers. K is true, F is False.
==
` ` == x x = K
` ` == 0 -2 = F
` ` == 0 -1 = F
` ` == 0 0 = K
` ` == 0 1 = F
` ` == 0 2 = F
...
` ` == 1 -1 = F
` ` == 1 0 = F
` ` == 1 1 = K
` ` == 1 2 = F
` ` == 1 3 = F
...
` ` == 2 0 = F
` ` == 2 1 = F
` ` == 2 2 = K
` ` == 2 3 = F
` ` == 2 4 = F
...
` ` == 19 20 = F
` ` == 20 20 = K
` ` == 21 20 = F
...
` ` == -19 -20 = F
` ` == -20 -20 = K
` ` == -21 -20 = F
...

// Number сomparison. Less.
<
` ` < 0 -1 = F
` ` < 0 0 = F
` ` < 0 1 = K
` ` < 0 2 = K
...
` ` < 1 0 = F
` ` < 1 1 = F
` ` < 1 2 = K
` ` < 1 3 = K
...
` ` < 2 1 = F
` ` < 2 2 = F
` ` < 2 3 = K
` ` < 2 4 = K
...
` ` < 19 20 = K
` ` < 20 20 = F
` ` < 21 20 = F
...
` ` < -19 -20 = F
` ` < -20 -20 = F
` ` < -21 -20 = K
...

// Binary encoding of numbers. 
//
// Bits: [type, len, 0, bits] where len is 1, 1, ... 1 - unary encoding of the bits length (4 bits for each 1 in len)
// type is 01 for positive numbers and 10 for negative numbers.
encode
` encode 0 = encode_0
` encode 1 = encode_1
` encode -1 = encode_-1
` encode 2 = encode_2
` encode -2 = encode_-2
...
` encode 16 = encode_16
` encode -16 = encode_-16
...
` encode 255 = encode_255
` encode -255 = encode_-255
` encode 256 = encode_256
` encode -256 = encode_-256
...

// Binary decoding. Opposite operation to encoding.
decode
` decode ` encode x = x
` encode ` decode x = x

// Network request-response.
// Sends encoded argument, receives encoded response, decodes response and returns decoded response
//
// ```
// ` send x = y
// ```
IMAGE_images/send.png

// AFTER CONTEST START.
//
// Negation
negate
` negate 0 = 0
` negate 1 = -1
` negate -1 = 1
` negate 2 = -2
` negate -2 = 2
...

//More semanthics of function call sign. It is used instead of brackets. 
`
` succ ` succ 0 = 2
` succ ` succ ` succ 0 = 3
` succ ` pred x = x
` pred ` succ x = x
` pred ` ` + x 1 = x
` ` + ` ` + 2 3 4 = 9
` ` + 2 ` ` + 3 4 = 9
` ` + ` ` * 2 3 4 = 10
` ` * 2 ` ` + 3 4 = 14
succ = ` + 1
pred = ` + ` negate 1
...

// S-combinator. S(x, y, z) = x(z, y(z))
S
` ` ` S x y z = ` ` x z ` y z
` ` ` S + succ 1 = 3
` ` ` S * ` + 1 6 = 42
...

// C-combinator. C(x, y, z) = x(z, y)
C
` ` ` C x y z = ` ` x z y
` ` ` C + 1 2 = 3
...

// B-combinator. B(x, y, z) = x(y(z))
B
` ` ` B x y z = ` x ` y z
` ` ` B succ pred x = x
...

// K-combinator. K(x, y) = x. It has meaning of TRUE (see below) 
K
` ` K x y = x
` ` K 1 5 = 1
` ` K K I = K
` ` K K ` succ 5 = K
` ` K ` succ 5 K = 6
...

// F-combinator. F(x, y) = y. It has meaning of FALSE (see below).
F
` ` F x y = y
F = ` S K

// i-th power of two.
// This definition is correct with lazy arguments evaluation only.
// Can be used as a testcase for the virtual machine testing.
power2
power2 = ` ` S ` ` C ` == 0 1 ` ` B ` * 2 ` ` B power2 ` + -1
` power2 0 = ` ` ` S ` ` C ` == 0 1 ` ` B ` * 2 ` ` B power2 ` + -1 0
` power2 0 = ` ` ` ` C ` == 0 1 0 ` ` ` B ` * 2 ` ` B power2 ` + -1 0
` power2 0 = ` ` ` ` == 0 0 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 0
` power2 0 = ` ` K 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 0
` power2 0 = 1
` power2 1 = ` ` ` S ` ` C ` == 0 1 ` ` B ` * 2 ` ` B power2 ` + -1 1
` power2 1 = ` ` ` ` C ` == 0 1 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 1 
` power2 1 = ` ` ` ` == 0 1 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 1
` power2 1 = ` ` F 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 1
` power2 1 = ` ` ` B ` * 2 ` ` B power2 ` + -1 1
` power2 1 = ` ` * 2 ` ` ` B power2 ` + -1 1
` power2 1 = ` ` * 2 ` power2 ` ` + -1 1
` power2 1 = ` ` * 2 ` ` ` S ` ` C ` == 0 1 ` ` B ` * 2 ` ` B power2 ` + -1 ` ` + -1 1
` power2 1 = ` ` * 2 ` ` ` ` C ` == 0 1 ` ` + -1 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 ` ` + -1 1
` power2 1 = ` ` * 2 ` ` ` ` == 0 ` ` + -1 1 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 ` ` + -1 1
` power2 1 = ` ` * 2 ` ` ` ` == 0 0 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 ` ` + -1 1
` power2 1 = ` ` * 2 ` ` K 1 ` ` ` B ` * 2 ` ` B power2 ` + -1 ` ` + -1 1
` power2 1 = ` ` * 2 1
` power2 1 = 2
` power2 2 = ` ` ` S ` ` C ` == 0 1 ` ` B ` * 2 ` ` B power2 ` + -1 2
...
` power2 2 = 4
` power2 3 = 8
` power2 4 = 16
` power2 5 = 32
` power2 6 = 64
` power2 7 = 128
` power2 8 = 256
...

// I-combinator. I(x) = x
I
` I x = x
` I 1 = 1
` I I = I
` I + = +
` I ` + 1 = ` + 1
...

// Pair of two numbers. For pair, head, tail, emptyList and isEmptyList see lambda expressions Church encoding for pairs and lists: https://en.wikipedia.org/wiki/Church_encoding#Church_pairs
pair
` ` ` pair x y z = ` ` z x y

// The first element of the pair
head
` head ` ` pair x y = x
` head z = ` z K

// The second element of the pair
tail
` tail ` ` pair x y = y
` tail z = ` z F

// Empty list (see below)
emptyList
` emptyList x = K

// Is empty list (see below)
isEmptyList
` isEmptyList emptyList = K
` isEmptyList ` ` pair x y = F

// Syntax sugar for lists. List is pair of the first element and the tail.
( , )
( ) = emptyList
( x ) = ` ` pair x emptyList
( x , y ) = ` ` pair x ` ` pair y emptyList
( x , y , z ) = ` ` pair x ` ` pair y ` ` pair z emptyList
( x , y , z , w ) = ` ` pair x ` ` pair y ` ` pair z ` ` pair w emptyList
...

// Vector (Point coordinates)
vec
vec = pair

// Drawing list of points
draw
` draw ( ) = []
` draw ( ` ` vec 1 1 ) = [1,1]
` draw ( ` ` vec 1 2 ) = [1,2]
` draw ( ` ` vec 2 5 ) = [2,5]
` draw ( ` ` vec 1 2 , ` ` vec 3 1 ) = [1,2;3,1]
` draw ( ` ` vec 5 3 , ` ` vec 6 3 , ` ` vec 4 4 , ` ` vec 6 4 , ` ` vec 4 5 ) = [5,3;6,3;4,4;6,4;4,5]
...

chess
chess = ` ` S ` ` B S ` ` C ` ` B C ` ` B ` C ` C ` ` S ` ` B S ` ` B ` B ` ` S I I < == ` ` S * I emptyList ` ` S ` ` B S ` ` B ` B pair ` ` S ` ` B S ` ` B ` B pair ` C / ` C ` ` S ` ` B B ` ` C ` ` B B + negate ` ` B ` S * / ` ` C ` ` B B chess ` ` C + 2
` ` chess 7 0 = [0,0;0,2;0,4;0,6;1,1;1,3;1,5;2,0;2,2;2,4;2,6;3,1;3,3;3,5;4,0;4,2;4,4;4,6;5,1;5,3;5,5;6,0;6,2;6,4;6,6]
` ` chess 13 0 = [0,0;0,2;0,4;0,6;0,8;0,10;0,12;1,1;1,3;1,5;1,7;1,9;1,11;2,0;2,2;2,4;2,6;2,8;2,10;2,12;3,1;3,3;3,5;3,7;3,9;3,11;4,0;4,2;4,4;4,6;4,8;4,10;4,12;5,1;5,3;5,5;5,7;5,9;5,11;6,0;6,2;6,4;6,6;6,8;6,10;6,12;7,1;7,3;7,5;7,7;7,9;7,11;8,0;8,2;8,4;8,6;8,8;8,10;8,12;9,1;9,3;9,5;9,7;9,9;9,11;10,0;10,2;10,4;10,6;10,8;10,10;10,12;11,1;11,3;11,5;11,7;11,9;11,11;12,0;12,2;12,4;12,6;12,8;12,10;12,12]

// Drawing list of images (Each image is a list of points)
drawAll
` drawAll emptyList = emptyList
` drawAll ` ` pair x y = ` ` pair ` draw x ` drawAll y

// Binary encoding of pairs and lists.
// 00 - emptyList
// 11 - pair
encode pair
` encode emptyList = encode_emptyList
` encode ` ` pair emptyList emptyList = encode_`_`_pair_emptyList_emptyList
` encode ` ` pair 0 emptyList = encode_`_`_pair_0_emptyList
` encode ` ` pair 1 2 = encode_`_`_pair_1_2
` encode ` ` pair 1 ` ` pair 2 emptyList = encode_`_`_pair_1_`_`_pair_2_emptyList
` encode ( 1 , 2 ) = encode_`_`_pair_1_`_`_pair_2_emptyList
` encode ( 1 , ( 2 , 3 ) , 4 ) = encode_`_`_pair_1_`_`_pair_`_`_pair_2_`_`_pair_3_emptyList_`_`_pair_4_emptyList
...

// Countdown. Returns time left in ticks.
// One tick is 2^32 * (Period of Hydrogen line) (https://en.wikipedia.org/wiki/Hydrogen_line). 
// One alien tick is approximatelly 3 Earth seconds.
//
// Request/response format:
//
// Request is a list. The first item is probably request type (0 for the countdown)
// Response is a list too. The first item is 1 (1 - success, 0 - error). The second is the payload (time left for countdown).
countdown
` send ( 0 ) = ( 1 , countdown )

// ifzero(x,y,z)
//
// if x == 0 then y else z
ifzero
` ` ` ifzero 0 x y = x
` ` ` ifzero 1 x y = y

// Wow! It is a computer specification!
//
// On each step computer takes state and event and then either draw list of screens, or send request to server and returns new computer state.
// While state should be encodable (asData checks that), i.e. should consists of lists and numbers only (encode is defined only for numbers and lists).
// 
// ```
// Computer(program, state, event): // event may be a network response
//     res = program(state, event) // res is tuple: (0, state1, list-of-screens) or (1, state1, request-to-send) and state1 is encodable.
//     if (res[0] == 0) return (asData(res[1]), drawAll(res[2]))  // Draw list of screens
//     else return Computer(program, asData(res[1]), send(res[2])) // nonzero res[0] is the signal to send request res[2].
// ```
computer
` asData x = ` decode ` encode x
` ` process z x = ` ` ` ifzero ` head x ( ` asData ` head ` tail x , ` drawAll ` head ` tail ` tail x ) ` ` ` computer z ` asData ` head ` tail x ` send ` head ` tail ` tail x
` ` ` computer z v w = ` ` process z ` ` z v w

// Start computer, passing it emptyList and point (0, 0) as event. Then iterate computer passing it some other points as events (mouse click?)
computer
` ` ` computer x0 emptyList ` ` vec 0 0 = ( x16 , ` drawAll x64 )
` ` ` computer x0 x16 ` ` vec x1 x2 = ( x17 , ` drawAll x65 )
` ` ` computer x0 x17 ` ` vec x3 x4 = ( x18 , ` drawAll x66 )
` ` ` computer x0 x18 ` ` vec x5 x6 = ( x19 , ` drawAll x67 )
...

// Two sample programs below. 
//
// Sample 1. Program which draws clicked pixel
` computer drawClickedPixelProgram
` ` drawClickedPixelProgram emptyList y = ( 0 , emptyList , ( ( y ) ) )
drawClickedPixelProgram = ` ` C ` ` B B ` ` B ` B ` pair 0 ` ` C ` ` B B pair ` ` C pair emptyList ` ` C ` ` B pair ` ` C pair emptyList emptyList
` ` ` computer drawClickedPixelProgram emptyList ` ` vec 1 0 = ( emptyList , ( [1,0] ) )
` ` ` computer drawClickedPixelProgram emptyList ` ` vec 2 3 = ( emptyList , ( [2,3] ) )
` ` ` computer drawClickedPixelProgram emptyList ` ` vec 4 1 = ( emptyList , ( [4,1] ) )
...

// Sample 2. Program which draws all clicked pixels
` computer paintProgram
` ` paintProgram x y = ( 0 , ` ` pair y x , ( ` ` pair y x ) )
paintProgram = ` ` B ` B ` ` S ` ` B ` B ` pair 0 ` ` C ` ` B B pair ` ` C pair emptyList ` ` C pair emptyList ` C pair
` ` ` computer paintProgram emptyList ` ` vec 0 0 = ( ( ` ` vec 0 0 ) , ( [0,0] ) )
` ` ` computer paintProgram ( ` ` vec 0 0 ) ` ` vec 2 3 = ( x2 , ( [0,0;2,3] ) )
` ` ` computer paintProgram x2 ` ` vec 1 2 = ( x3 , ( [0,0;2,3;1,2] ) )
` ` ` computer paintProgram x3 ` ` vec 3 2 = ( x4 , ( [0,0;2,3;1,2;3,2] ) )
` ` ` computer paintProgram x4 ` ` vec 4 0 = ( x5 , ( [0,0;2,3;1,2;3,2;4,0] ) )
...

// Time to run operation system!
` computer os = ...